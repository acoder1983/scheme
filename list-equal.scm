(define (list-equal? lst1 lst2)
  (cond ((and (null? lst1) (null? lst2)) #t)
        ((or (and (not (null? lst1)) (null? lst2))
             (and (not (null? lst2)) (null? lst1))
             (and (not (pair? lst1)) (pair? lst2))
             (and (not (pair? lst2)) (pair? lst1))) #f) 
        ((and (not (pair? lst1)) (not (pair? lst2))) (= lst1 lst2))
        (else (and (list-equal? (car lst1) (car lst2))
                   (list-equal? (cdr lst1) (cdr lst2))))))
        
(define (test-list-equal)
  (and (list-equal? () ())
       (list-equal? 1 1)
       (not (list-equal? 0 1))
       (not (list-equal? () (list 1)))
       (not (list-equal? (list 1) ()))
       (not (list-equal? (list 1) (list 2)))
       (list-equal? (list 1) (list 1))
       (list-equal? (list 1 2) (list 1 2))
       (not (list-equal? (list 1) (list 1 2)))
       (not (list-equal? (list 1 2) (list 1)))
       (list-equal? (list 1 2 (list 3 4)) (list 1 2 (list 3 4)))
       (not (list-equal? (list (list 1 2) (list 3 4)) (list 1 2 3 4)))))